import socket
from core import logger


class Auxiliary:
	config={
		"RHOST":"127.0.0.1"
		"Thread":"300"
	}
	def show_options(self):
		print(Fore.YELLOW+"Options"+Style.RESET_ALL)
		print(Fore.YELLOW+"-------"+Style.RESET_ALL)
		for key in sorted(self.config.keys()):
			print(Fore.YELLOW+key, self.config[key], self.get_config(key)+Style.RESET_ALL)


	@staticmethod
	def show_info():
		print(Fore.YELLOW+"\nThis exploit tries to do a buffer \noverflow to the given ip and port"+Style.RESET_ALL)

	
	def set_config(self, key, value):
		if key in self.config.keys():
			self.config[key] = value
		else:
			print("No options")
	
	
	def get_config(self, key):
		return self.config[key]

	def run(self):
		def scanner(RPORT, i):
			sock=socket.socket()
			result=sock.connect_ex((RHOST, RPORT))
			if result==0:
				logger.Vulnerable("Port {}".format(RPORT))
			else:
				logger.NotVulnerable("Port {}".format(RPORT))
			sock.close()
			i+=1

		for i in range(int(self.config["Thread"])):
			i=1
			thread=threading.Thread(target=scanner, args=(RPORT, hi))
			thread.start()
			while True:
				if i<65353:
					pass
				elif i>65353:
					break
