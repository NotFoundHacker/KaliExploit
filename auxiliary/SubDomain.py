import aiohttp
import asyncio
from colorama import *

class Auxiliary:
	config = {
    }
	def show_options(self):
		print(Fore.YELLOW+"Options\t\tNecessity\t\tDefault"+Style.RESET_ALL)
		print(Fore.YELLOW+"-------\t\t---------\t\t-------"+Style.RESET_ALL)
		for key in sorted(self.config.keys()):
			print(Fore.YELLOW+"%s\t\t%s\t\t\t%s" % (
				key, self.config[key]["necessity"], self.get_config(key))+Style.RESET_ALL)
		
	
	@staticmethod
	def show_info():
		print(Fore.YELLOW+"\nauxiliary subdomain scanner"+Style.RESET_ALL)
	
		
	def set_config(self, key, value):
		if key in self.config.keys():
			self.config[key]["default"] = value
		else:
			print("No options")
		
		
	def get_config(self, key):
		return self.config[key]["default"]
	def run(self):
		domain=input("domain> ")
		file = open("/KaliExploit/Text/Auxiliary/subdomain_names.txt")
		content = file.read()
		subdomains = content.splitlines()
		discovered_subdomains = []
		async def main():
			session=aiohttp.ClientSession()
			for subdomain in subdomains:
				url = f"http://{subdomain}.{domain}"
				try:
					await session.get(url, ssl=False)
				except:
					pass
				else:
					print("[+] Discovered subdomain:", url)
					discovered_subdomains.append(url)
			print(discovered_subdomains)
		asyncio.run(main())
